def level_order_traversal_bottom_to_top(root):
    if root is None:
        return []

    queue = deque()
    queue.append(root)
    result = []

    while queue:
        level_size = len(queue)
        level_nodes = []

        for _ in range(level_size):
            current_node = queue.popleft()
            level_nodes.append(current_node.value)

            if current_node.left:
                queue.append(current_node.left)
            if current_node.right:
                queue.append(current_node.right)

        result.append(level_nodes)

    # Reverse the result list for bottom-to-top order
    return result[::-1]

# Sample tree construction
root = TreeNode('A')
root.left = TreeNode('B')
root.right = TreeNode('C')
root.left.left = TreeNode('D')
root.left.right = TreeNode('E')
root.right.left = TreeNode('F')
root.right.right = TreeNode('G')

print("Level order traversal (bottom to top) of binary tree:")
traversal = level_order_traversal_bottom_to_top(root)

# Convert each level list's values to strings before joining and printing them
for level in traversal:
    print(' '.join(str(node) for node in level))
